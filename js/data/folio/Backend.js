


export const backend0 = {
    title : "Slate & Winter",
    banner : "logo-0.png",
    thumimgs : [
        "board-0.gif",
        "bm-0.gif",
        "thomas-0.gif"
    ],
    thumcontent : 
        "Java로 제작한 Fake Spring Winter, <br>" +
        "JavaScript로 제작한 동적 웹 Slate를 통하여<br>"+
        "게시판(Board), 배달의 민족(BM) [Buyer, Seller, Order]<br>"+
        "기타 서비스들을 제작하였습니다.<br>" +
        "이하 커리큘럼 과정 중 프론트 개발과,<br>" +
        "포트폴리오 사이트에 사용되었습니다."
    ,
    html : "slate-winter",

    titles : [
        "Board: 시연",
        "인덱스 화면",
        "회원가입 & 로그인 ",
        "프로필 사진 업로드 & 게시글 작성",
        "게시글 삭제 & 상세보기 & 코멘트 작성",
        "위젯 : main-view",
        "위젯 : n-board",

        "Bm: 시연",
        "구매자 & 판매자 & 오더",
        "로그인 화면",
        "구매자 스토어 카테고리",
        "구매자 메뉴 구매",
        "판매자 스토어 & 메뉴",
        "판매자 아이템 등록",
        "오더",

        "Thomas: 시연",
    ],
    imgs : [
        "board-0.gif",
        "board-1.png",
        "board-2.png",
        "board-3.png",
        "board-4.png",
        "board-5.png",
        "board-6.png",

        "bm-0.gif",
        "bm-1.png",
        "bm-2.png",
        "bm-3.png",
        "bm-4.png",
        "bm-5.png",
        "bm-6.png",
        "bm-7.png",

        "thomas-0.gif"
    ],
    comments : [
        "로그인 및 게시판 상세보기, 코멘트 작성<br>"+
        "RestBinder를 통해 스크롤시 Winter API를 요청하여<br>"+
        "게시글을 동적으로 생성하는 모습입니다.",

        "인덱스 화면 입니다. 로그인 위젯 및 메인 뷰 위젯 입니다.",

        "회원가입 및 로그인을 통한<br>"+
        "Winter 서버로부터 받은 응답 입니다.",
        
        "게시글 및 파일을 업로드 합니다.<br>"+
        "파일을 Blob화 하여 DB에 저장합니다<br>"+
        "Winter 서버로부터 받은 응답 입니다.",

        "게시글 삭제 및 디테일 뷰 위젯을 통해<br>"+
        "게시글을 상세히 보며, 이하 Winter서버에<br>"+
        "해당 게시글에 작성된 코멘트 API를 요청합니다.<br>"+
        "또한, Send시 게시글 내의 코멘트 게시 API를 호출합니다.",

        "메인 뷰 위젯입니다. HTML, CSS, JS<br>"+
        "이하 셋 리소스를 묶어 하나로 랜더링합니다.",
    
        "게시글 위젯입니다. HTML, CSS, JS<br>"+
        "이하 셋 리소스를 묶어 하나로 랜더링합니다.",

        "구매자 서비스 입니다. 인트로 및 로그인을 이후<br>"+
        "스토어 카테고리를 Winter 서버에 요청 합니다.<br>"+
        "스토어로 등록된 판매자, 메뉴를 구매하는 모습입니다.",

        "구매자, 판매자, 오더, 각각의 서비스로 존재하는 모습입니다.",

        "로그인 화면, 로그인 위젯 입니다.",

        "카테고리 선택 및 스토어 리스트를<br>" +
        "판매자 서버로부터 응답받은 모습입니다.",

        "구매자가 스토어 아이템을 구매하는 모습입니다.<br>" +
        "판매자 서버로 API를 요청합니다.",

        "판매자 서비스내의 스토어 등록 및<br>"+
        "주문 확인 메뉴 입니다.",

        "스토어 내의 아이템을 등록하는 모습입니다.",

        "판매자는 구매 요청을 확인합니다<br>" +
        "또한 오더 서버는 전체 서비스 오더 내역을 확인합니다.",

        "tetrapod프로젝트에서 사용하였습니다.<br>"+ 
        "커스텀마이징된 다수의 스프링 서버와<br>"+
        "연결합니다. 동적인 화면을 의도하여<br>"+
        "다수의 물리 오브젝트 및 커서에 따라 시선이 따라갑니다.",
    ]
}

export const backend1 = {
    title : "StudyClub & WebRTC",
    banner : "logo-1.png",
    thumimgs : [
        "sc-0.gif",
        "rtc-1.gif",
    ],
    thumcontent : 
        "스터디 사용자들을 모집하며, 웹 서비스 및<br>" +
        "WebRTC를 통해 1:1, N:N 화상 서비스를 제공합니다.<br>"+
        "시그널링 서버, RTC 캠 클라이언트를 통해<br>"+
        "N:N 화상 연결에 필요한 HTTP 메시지를 핸들링하였습니다.<br>" + 
        "P2P로 연결된 데이터 채널을 통해 채팅 및 공용 보드를 동기화합니다.",
    html : "studyclub-webrtc",

    titles : [
        "SC: 시연",
        "인덱스 화면",
        "로그인 & 회원가입 & 마이 페이지",
        "OAUTH",
        "자유 게시판",
        "게시판 디테일 & 코멘트 작성",
        "퀴즈",
        "스터디 룸 & 디테일",
        "스터디 룸 작성 & 입장",

        "RTC: 시연 1",
        "RTC: 시연 2",
        "시그널링 서버 JOIN 이벤트",
    ],
    imgs : [
        "sc-0.gif",
        "sc-1.png",
        "sc-2.png",
        "sc-3.png",
        "sc-4.png",
        "sc-5.png",
        "sc-6.png",
        "sc-7.png",
        "sc-8.png",

        "rtc-1.gif",
        "rtc-0.gif",
        "rtc-2.png",
    ],

    comments : [
        "웹소켓으로 1:1 WebRTC를 연결하는 모습입니다.<br>(작업 영역 없음)",
        "인덱스 화면입니다.<br>(작업 영역 없음)",
        "로그인, 회원가입, 마이 페이지 화면입니다.<br>(작업 영역 없음)",
        "OAUTH연동 화면입니다.<br>(작업 영역 없음)",
        "자유 게시판 화면입니다.<br>(작업 영역 없음)",
        "게시판 디테일 및 코멘트 작성 화면입니다.<br>(작업 영역 없음)",
        "퀴즈 콘텐츠 화면입니다.<br>(작업 영역 없음)",
        "스터디 룸 및 디테일 화면입니다.<br>(작업 영역 없음)",
        "스터디 룸 작성 및 입장 화면입니다.<br>(작업 영역 없음)",

        "WebRTC 두 클라이언트의 P2P연결 후 화면입니다.<br>"+
        "데이터 채널을 통해 채팅 및<br>"+
        "캔버스 메타 데이터를 전달 받으며<br>"+
        "드로잉 선 & 커서 & 이미지 파일들을 동기화합니다.",

        "N:N 다수의 WebRTC 연결 모습입니다.",

        "시그널링 서버의 JOIN 이벤트시 처리되는 로그입니다.<br>"+
        "E클라이언트의 접속(Join)이벤트를<br>"+
        "다수의 클라이언트에 멀티캐스팅 하는 상태입니다."
    ]
}

export const backend2 = {
    title : "Tetrapod",
    banner : "logo-2.png",
    thumimgs : [
        "metrics-0.gif",
        "metrics-1.gif",
    ],
    thumcontent : 
        "마이크로 서비스 내의 각 서버에 대한<br>결합 의존성에 대하여 고민해보았습니다.<br>" +
        "확장 책임을 공통 모듈에 위임하여 서버 간의<br>느슨한 결합으로 변경해보았습니다.<br>"+
        "Metrics을 통해 서버 발현 및 HTTP 메시지의<br>응답, 요청을 추적합니다.<br>",
    html : "tetrapod",
    
    titles : [
        "Metrics : 시연 1",
        "Metrics : 시연 2",
        "Metrics : 시연 3",
        "서버 체인 어댑터",
        "서버 확장",
        "Flow : 시연 1",
        "Flow : 시연 2",
    ],
    imgs : [
        "metrics-0.gif",
        "metrics-1.gif",
        "metrics-2.gif",
        "metrics-3.png",
        "metrics-4.png",
        "flow-0.gif",
        "flow-1.gif",
    ],

    comments : [
        "KR API, DB서버 추가후 서로 통신하는 모습입니다.<br>"+
        "이후 KR DB서버를 추가 연동한 후 통신<br>"+
        "글로벌 서버 및 EN API, DB서버를 추가<br>"+
        "어댑터를 통해 HTTP 헤더를 비교<br>"+
        "로컬라이징을 통해 어댑터로 분기하는 모습입니다.",

        "포스트맨으로 요청하여 어댑터 분기 및<br>"+
        "KR DB 서버로 밸런싱되는 모습입니다.",

        "가상 커서를 통해 프로세스를 되감거나 복구합니다.<br>"+
        "Undo, redo기능을 활용하여 요청 응답을 추적합니다.",

        "어댑터로 분기 됩니다.",

        "KR DB서버가 런타임 중 확장, 연결되는 모습입니다.",

        "추상화된 룰이라는 블럭 코드들이 실행되는 모습입니다.<br>" +
        "유저의 활성화, 주사위 굴림, 이동, 종료등의 프로세스가<br>" +
        "시뮬레이션 되는 모습입니다.",

        "호스트 기준 다수의 클라이언트가<br>"+
        "동기화되는 모습입니다.<br>" +
        "Winter 서버를 이용하여 상태를 동기화 합니다."
    ]
}

